* About

Shadowplay is a utility for checking puppet syntax, a puppet manifest linter, a pretty printer, and a utility for exploring the Hiera.

#+CAPTION: Flycheck plugin for Emacs
[[./doc/screenshot-emacs.png]]

* Installation methods

** Via deb/rpm

Latest releases can be downloaded here: [[https://github.com/mailru/shadowplay/releases]]

** MaOS binaries

Lastest binaries for MacOS can be downloaded here: [[https://github.com/mailru/shadowplay/releases]]

** Via cargo

#+BEGIN_SRC shell
cargo install shadowplay
#+END_SRC

** Guix manifest

Guix manifest is not merged into main repository yet. One can use etc/guix.scm from Shadowplay repo. All missing dependencies are also
included into manifest file.

* Usage

** Correctness of YAML files

#+BEGIN_SRC bash
shadowplay check yaml hieradata/default.yaml [hieradata/another.yaml] ...
#+END_SRC


In addition to the correctness of the syntax, the uniqueness of the keys in maps will be checked, as well as the correctness of the links
(anchors).

** Validity of Hiera YAML files

#+BEGIN_SRC bash
shadowplay check hiera hieradata/default.yaml ...
#+END_SRC

For the specified files, YAML correctness will be checked, as well as the correctness of references to Puppet classes and class arguments.
For example, there will be an error generated if an unknown class argument is used.

As a side effect, it also checks the correctness of syntax of pappet manifests referenced by values ​​in Hiera.

** Linter of Puppet manifest files

#+BEGIN_SRC bash
shadowplay --repo-path ./ check pp modules/hammer/manifests/config.pp ...
#+END_SRC

The specified files will be processed by the parser, then linter checks will be applied to the resulting AST (if parsing is successful).

** Pretty printing manifest file

#+BEGIN_SRC bash
shadowplay pretty-print-pp < /path/to/file.pp
#+END_SRC

** Config file generator

Use may want to disable some lints or customize it. She can generate default config and edit it later with the command:

#+BEGIN_SRC bash
shadowplay generate-config >/etc/shadowplay.yaml
#+END_SRC

** Hiera explorer

Hiera is hierarchy of yaml files. In huge configurations it may be difficult to determine value of specific key for some host. Shadowplay
provides easy solution.

#+BEGIN_SRC bash
shadowplay get host123 sshd::install::version
#+END_SRC

Command prints as much information as possible:

#+BEGIN_EXAMPLE
Value: "present"
Found in "./hieradata/default_CentOS7.yaml" at lines 63:63
Value lookup path was: network/host123.yaml -> host123.yaml -> host.yaml -> default_CentOS7.yaml
===================================
Git information:
deadbeef1234 (Evgenii Lepikhin 2022-03-29 15:06:51 +0300 63) sshd::install::version:             'present'
#+END_EXAMPLE

** *.pp AST dumper

#+BEGIN_SRC bash
shadowplay dump modules/sshd/manifests/install.pp
#+END_SRC

Outputs AST in JSON format. Mainly for internal purposes.

* Available lints for *.pp

** ArgumentLooksSensitive

Warns if argument name looks like sensitive, but argument is not typed with type Sensitive

Bad:

#+BEGIN_SRC puppet
class some::class (
  $secret_token,
) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
class some::class (
  Sensitive $secret_token,
) { }
#+END_SRC

** ArgumentTyped

Warns if argument is not typed

Bad:

#+BEGIN_SRC puppet
class some::class (
  $config_path,
) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
class some::class (
  Stdlib::Absolutepath $config_path,
) { }
#+END_SRC

** ConstantExpressionInCondition

Warns if constant expression is used in condition

Bad:

#+BEGIN_SRC puppet
if 1 == 2 - 1 { notify('1=2-1') }
#+END_SRC

Such type of conditions always evaluated into constant false or true, thus can be safely removed. Good:

#+BEGIN_SRC puppet
notify('1=2-1')
#+END_SRC

** DefaultCaseIsNotLast

Warns if 'default' case is not the last

Bad:

#+BEGIN_SRC puppet
case $value {
  'a': { }
  default: { }
  'b': { }
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
case $value {
  'a': { }
  'b': { }
  default: { }
}
#+END_SRC

** DoNotUseUnless

Warns if 'unless' conditional statement is used

Bad:

#+BEGIN_SRC puppet
unless $value { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
if !$value { }
#+END_SRC

** DoubleNegation

Warns if double negation is used

Bad:

#+BEGIN_SRC puppet
if !(!$value) { }

if !($value != 1) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
if $value { }

if $value == 1 { }
#+END_SRC

** EmptyCasesList

Warns if case { ... } has no cases

Bad:

#+BEGIN_SRC puppet
case $value { }
#+END_SRC

** EnsureAttributeIsNotTheFirst

Warns if 'ensure' argument of resource is not the first

Bad:

#+BEGIN_SRC puppet
file { '/etc/passwd':
  user => root,
  ensure => file,
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
file { '/etc/passwd':
  ensure => file,
  user => root,
}
#+END_SRC

** ErbReferencesToUnknownVariable

Checks ERB templates specified in template() for undefined variables

Bad:

#+BEGIN_SRC puppet
class some::class () {
  # here template_file.erb contains: <% @some_undefined_variable %>
  $value = template('some/template_file.erb')
}
#+END_SRC

** ExecAttributes

Checks exec { ...} arguments

Bad:

#+BEGIN_SRC puppet
# implicit 'command' attribute
exec { 'echo Hello' : }

exec {
  unknown_attribute => 1,
}

# invalid provider
exec {
  provider => 'unknown provider value'
}

# 'path' is not set, 'provider' is not 'shell', thus 'command' attribute of exec {} must start with absolute path
exec {
  command => 'echo Hello'
}
#+END_SRC

** ExpressionInSingleQuotes

Warns if interpolated expression found single-qouted string

Bad:

#+BEGIN_SRC puppet
$value = 'Hello $world'

$value = '2 + 2 = ${2+2}'
#+END_SRC

** FileModeAttributeIsString

Warns if argument 'mode' of 'file' resource is not in 4-digit string form

Bad:

#+BEGIN_SRC puppet
file { '/some/file':
  mode => '644',
}

file { '/some/file':
  mode => 644,
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
file { '/some/file':
  mode => '0644',
}
#+END_SRC

** InvalidResourceCollectionInvocation

Checks if existing resource set is used and all arguments are known in it's class

Bad:

#+BEGIN_SRC puppet
# relation to unknown resource
Class['unknown_class'] -> Class['known_class']
#+END_SRC


** InvalidResourceSetInvocation

Checks if existing resource is used and all arguments are known in it's class

Bad:

#+BEGIN_SRC puppet
class class1 (
  $known_arg,
) { }

class class2 {
  # Call to unknown class
  class { 'unknown_class': }

  # Call to known class with invalid argument
  class { 'class1':
    unknown_arg => 1
  }

  # Call to known class with invalid argument
  class1 { 'title':
    unknown_arg => 1,
  }

  # Call to internal resource with invalid argument
  file { '/some/file':
    uknown_arg => 1,
  }
}
#+END_SRC

** InvalidStringEscape

Checks if only allowed characters are escaped in strings

Bad:

#+BEGIN_SRC puppet
$value = '\s*\.'

$value = "\s*\."
#+END_SRC

Good:

#+BEGIN_SRC puppet
$value = '\\s*\\.'

$value = "\\s*\\."
#+END_SRC

** InvalidVariableAssignment

Warns if left part of assignment is not a variable or array of variables

Bad:

#+BEGIN_SRC puppet
lookup('some::value') = 1
#+END_SRC


** LowerCaseArgumentName

Warns if argument name is not lowercase, as suggested by Puppet's style guide

Bad:

#+BEGIN_SRC puppet
class some::class (
  $ArgumentInCamelCase
) {}
#+END_SRC


** LowerCaseVariable

Warns if variable name is not lowercase

Bad:

#+BEGIN_SRC puppet
class some::class () {
  $VariableIsNOTInLowercase = 1

#+END_SRC

** MultipleDefaultCase

Warns if case statement has multiple 'default' cases

Bad:

#+BEGIN_SRC puppet
case $val {
  1: {}
  default: {}
  default: {}
}
#+END_SRC


** MultipleResourcesWithoutDefault

Warns if resource set contains multiple resources and no defaults specified

Bad:

#+BEGIN_SRC puppet
file {
  '/etc/passwd':
    ensure => file,
    user => root,
  '/etc/group':
    ensure => file,
    user => root,
    group => wheel,
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
file {
  default:
    ensure => file,
    user => root,
  '/etc/passwd':
  '/etc/group':
    group => wheel,
}
#+END_SRC

** NegationOfEquation

Warns on negation of equation

Bad:

#+BEGIN_SRC puppet
if !($a == 1) { }

if !($a =~ /./) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
if $a != 1 { }

if $a !~ /./ { }
#+END_SRC

** NoDefaultCase

Warns if case statement has no default case

Bad:

#+BEGIN_SRC puppet
case $val {
  1, 2: {  }
  3: { }
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
case $val {
  1, 2: {  }
  3: { }
  default: { }
}
#+END_SRC

** OptionalArgumentsGoesFirst

Warns if optional argument specified before required

#+BEGIN_SRC puppet
class some::class (
  $optional_arg = 1,
  $required_arg,
) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
class some::class (
  $required_arg,
  $optional_arg = 1,
) { }
#+END_SRC

** PerExpressionResourceDefaults

Warns if local resource defaults are used

Bad:

#+BEGIN_SRC puppet
Exec {
  provider => shell,
}

exec { 'run command':
  command => 'echo Hello',
}
#+END_SRC

** ReadableArgumentsName

Warns if argument name is not readable enough

Bad:

#+BEGIN_SRC puppet
class some::class (
  String $c = '/etc/config',
) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
class some::class (
  String $config = '/etc/config',
) { }
#+END_SRC

** ReferenceToUndefinedValue

Warns if variable is not defined in current context

Bad:

#+BEGIN_SRC puppet
if $some_undefined_variable { }
#+END_SRC

** RelationToTheLeft

Checks for left-directed relations

Bad:

#+BEGIN_SRC puppet
Class['c'] <- Class['b'] <~ Class['a']
#+END_SRC

Good:

#+BEGIN_SRC puppet
Class['a'] ~> Class['b'] -> Class['c']
#+END_SRC

** SelectorInAttributeValue

Warns if selector (... ? ... : ...) used in resource attribute

Bad:

#+BEGIN_SRC puppet
file { '/etc/shadow':
  mode => $is_secure ? '0600' : '0644',
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
$file_mode = $is_secure ? '0600' : '0644'

file { '/etc/shadow':
  mode => $file_mode,
}
#+END_SRC

** SensitiveArgumentWithDefault

Warns if argument typed with Sensitive contains default value

Bad:

#+BEGIN_SRC puppet
class some::class (
  Sensitive $password = 'admin',
)
#+END_SRC

Public available default value for sensitive data is nonsense. Good:

#+BEGIN_SRC puppet
class some::class (
  Sensitive $password,
)
#+END_SRC

** StatementWithNoEffect

Checks for statements without side effects

Bad:

#+BEGIN_SRC puppet
if $a {
  if $b {
    2 + 2
  }
}
#+END_SRC

** UnconditionalExec

Warns if exec { ... } is specified without unless, onlyif, creates or refreshonly attributes

Bad:

#+BEGIN_SRC puppet
exec { 'run command':
  command => '/bin/rm -rf /var/cache/myapp',
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
exec { 'run command':
  command => '/bin/rm -rf /var/cache/myapp',
  onlyif => 'test -e /var/cache/myapp',
}
#+END_SRC

** UniqueArgumentsNames

Checks for class/definition/plan arguments uniqueness

Bad:

#+BEGIN_SRC puppet
class some::class (
  $arg,
  $arg,
  $arg,
) { }
#+END_SRC


** UniqueAttributeName

Resource attributes must be unique

Bad:

#+BEGIN_SRC puppet
service { 'sshd':
  ensure => running,
  ensure => stopped,
}
#+END_SRC

** UnusedVariables

Checks for unused variables. Experimental lint false-positives are possible.

Bad:

#+BEGIN_SRC puppet
class some::class (
  $unused_argument,
) {
  service { 'sshd':
    ensure => running,
  }
}
#+END_SRC

** UpperCaseName

Warns if resource set used with uppercase letters

Bad:

#+BEGIN_SRC puppet
Service { 'sshd':
  ensure => running,
}
#+END_SRC

Good:

#+BEGIN_SRC puppet
service { 'sshd':
  ensure => running,
}
#+END_SRC

** UselessDoubleQuotes

Warns if double quoted string has no interpolated expressions and no escaped single quotes

Bad:

#+BEGIN_SRC puppet
$var = "simple literal"
#+END_SRC

Good:

#+BEGIN_SRC puppet
$var = 'simple literal'
#+END_SRC

** UselessParens

Checks for extra parens

Bad:

#+BEGIN_SRC puppet
if (($var1) or ($var2)) { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
if $var1 or $var2 { }
#+END_SRC

** MagicNumber

Warns if term contains magic number.

Bad:

#+BEGIN_SRC puppet
if $port == 58271 { }
#+END_SRC

Good:

#+BEGIN_SRC puppet
$default_service_port = 58271

if $port == $default_service_port { }
#+END_SRC

** TooManyArguments

Warns if class or definition accepts too many arguments.

** HugeCodeBlock

Points to too long statements lists.

** DeepCode

Alerts on too deep code blocks.

* Linter for YAML files

Some basic checks are implemented:
 - File is not executable
 - File is empty (no root value available)
 - File parsed without syntax errors
 - Maps does not contain duplicate keys
 - Attempt to merge anchor which type is not array nor map

* Linter for Hiera YAML files

All lints of YAML files plus:

** Reference to a module which has syntax errors

Linter will fail if some_class was unable to parse:

#+BEGIN_SRC yaml
some_class::argument: 1
#+END_SRC

** Reference to class which is not found in modules/

Linter will fail if modules/some_class/init.pp does not exists:

#+BEGIN_SRC yaml
some_class::argument: 1
#+END_SRC

** Reference in undefined class argument

Linter will fail if some_class does not accept argument $argument_name:

#+BEGIN_SRC yaml
some_class::argument_name: 1
#+END_SRC

** Single column in the name of key of root map

Linter protects agains typos like:

#+BEGIN_SRC yaml
some_class:argument_name: 1
#+END_SRC
